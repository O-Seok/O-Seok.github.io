{"meta":{"title":"O-Seok 개발일지","subtitle":"","description":"","author":"O-Seok","url":"https://O-Seok.github.io","root":"/"},"pages":[],"posts":[{"title":"hexo hueman 테마에서 반응형으로 header 레이아웃 변경하기","slug":"hexo-hueman-테마에서-header-반응형으로-레이아웃-변경하기","date":"2020-05-22T12:38:58.000Z","updated":"2020-05-22T13:26:44.313Z","comments":true,"path":"2020/05/22/hexo-hueman-테마에서-header-반응형으로-레이아웃-변경하기/","link":"","permalink":"https://o-seok.github.io/2020/05/22/hexo-hueman-%ED%85%8C%EB%A7%88%EC%97%90%EC%84%9C-header-%EB%B0%98%EC%9D%91%ED%98%95%EC%9C%BC%EB%A1%9C-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0/","excerpt":"","text":"블로그 헤더부분에 로고 이미지와 간단한 제목을 작성하였다. # 불편함 발생웹페이지가 넓을 때는 현재 레이아웃이 마음에 들었지만 반응형으로 크기를 조절 하니 어디 한군데가 너무나 불편해 졌다. 심지어 모바일에서 블로그를 접속 해보면 확연하게 불편하다. 디자인 1도 모르지만 어느시점에서 로고이미지와 소개글이 가운데로 왔으면 좋겠다. # 반응형으로 header 레이아웃 변경이제 불편함을 지워보자. 💪🏼 theme/hueman/_partial/header.styl 로 들어가 css를 수정한다. header.styl : 123456789.logo-wrap width: 100%.header-title-name width: 100% margin-bottom: 15px padding-left: 50px font-style: italic font-size: 20px logo-wrap: logo를 감싸고 있는 클래스header-title-name: 간단한 소개글 클래스 @media@media 를 사용해서 웹페이지 폭에 따라 속성값들을 각각 변경해준다.width &lt; 960px : 로고이미지, 소개글 가운데 정렬width &gt;= 960px : 원래의 레이아웃 유지 header.styl : 12345678910111213141516171819202122232425262728@media screen and (max-width: 959px) #header-title padding: 0 0 .logo-wrap width: 100% text-align: center .logo display: inline-block .header-title-name width: 100% margin-bottom: 15px text-align: center font-style: italic font-size: 20px@media screen and (min-width: 960px) .logo-wrap width: 100% .header-title-name width: 100% margin-bottom: 15px padding-left: 50px font-style: italic font-size: 20px 위와 같이 max-width: 959px, min-width: 960px 속성값을 주고 각각에 맞는 속성값들을 넣어 주었다. # 불편함 해결 👏🏼불편함 삭제 !! 확인 ✔️ 모바일도 확인 ✔️","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://o-seok.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://o-seok.github.io/tags/blog/"},{"name":"hueman","slug":"hueman","permalink":"https://o-seok.github.io/tags/hueman/"},{"name":"theme","slug":"theme","permalink":"https://o-seok.github.io/tags/theme/"},{"name":"layout","slug":"layout","permalink":"https://o-seok.github.io/tags/layout/"},{"name":"css","slug":"css","permalink":"https://o-seok.github.io/tags/css/"}]},{"title":"파이썬 - 클래스","slug":"파이썬-클래스","date":"2020-05-20T04:15:45.000Z","updated":"2020-05-21T07:42:48.164Z","comments":true,"path":"2020/05/20/파이썬-클래스/","link":"","permalink":"https://o-seok.github.io/2020/05/20/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4/","excerpt":"","text":"클래스는 객체의 구조와 행동을 정의 한다.객체의 클래스는 초기화를 통해 제어 한다.클래스는 복잡한 문제를 다루기 쉽도록 한다. ✔️ class, 객체(object), 인스턴스(instance)객체(object) 는 소프트웨어 세계에 구현할 대상이고, 이를 구현하기 위한 설계도가 class 이며, 설계도에 따라 소프트웨어 세계에 구현된 실체가 인스턴스(instance) 이다. 보통 인스턴스를 객체라고도 부른다. # 클래스 정의 (class)class 키워드를 사용하여 새로운 클래스를 선언한다.파이썬 대부분이 네이밍컨벤션이 단어와 단어 사이에 _를 넣는다면 클래스의 네이명 컨벤션은 CamelCase로 한다. 123class ClassInfo: def __init__(self): print(\"초기화\") 생성자와 인스턴스인스턴스: 변수에 클래스를 할당 하는 것. 객체가 메모리상에 할당이 되는 것생성자: 변수에 클래스를 할당할 때 쓰인다. 인스턴스 할 때 사용하는 것 12345class ClassInfo: def __init__(self): print(\"초기화\")cInfo = ClassInfo() cInfo : 변수ClassInfo() : 생성자 # 초기화자(initializing)객체(인스턴스)가 생성되고 나면 __init__ 메소드를 호출하여 객체에서 사용할 값들을 초기화 한다.객체에 초기화된 변수들, 인스턴스 변수 들을 호출 할 수 있다. 123456789101112class UserInfo: def __init__(self, name, height, weight): self.name = name self.height = height self.weight = weightuser1 = UserInfo(\"Kim\", 190, 80)print(user1.name)print(user1.height)print(user1.weight) 123Kim19080 # 메소드 타입 (self / cls)인스턴스 함수(메소드) 인스턴스화 되었을 떄 접근/사용 가능 self를 인자로 받음 클래스 함수(메소드) 클래스 안에 존재하기 때문에 공유 가능 cls를 인자로 받음 메소드 위에 @classmethod 를 붙여서 사용 123456789101112131415161718class Person: count = 0 def __init__(self): # self.count 가 아니라 Person.count 접근 Person.count += 1 @classmethod def call(cls): # Person.count가 아니라 cls.count 접근 print('Class method all:', cls.count)a = Person()b = Person()c = Person()Person.call() a, b, c 객체들이 인스턴스화 되면서 클래스 변수 count값을 각각 __init__() 에서 1씩 증가 시켰기 떄문에 출력해보면 3이 된다. 1Class method all: 3 # get/set 속성값과 propertyOOP 언어에서 private 속성을 위해 getter/setter 메소드 제공파이썬에선 getter/setter 메소드 불필요모든 속성과 메소드는 public 이며 필요에 따라서 property 사용가능 @property , @[데코레이터] 사용@property : getter의 역할로 사용될 메소드 위에 데코레이터로 사용해준다. 변수로서의 사용을 가능하게 해준다.@(getter역할의 메소드 이름).setter : getter역할의 메소드의 setter역할을 해주는 메소드위에 사용해준다. 변수로서의 사용을 가능하게 해준다. ⚠️ @property 와 @(getter역할의 메소드 이름).setter getter와 setter역할을 하는 메소드의 이름은 동일하게 해주어야 한다. @().setter의 ()에는 @property의 메소드 이름을 붙여준다. 1234567891011121314class Person: def __init__(self, name): self.hidden_name = name @property def name(self): return self.hidden_name @name.setter def name(self, name): self.hidden_name = name # 객체 p = Person('John') @property를 데코레이터로 사용해주면 메소드를 변수처럼 사용할 수 있다. 1print(p.name) 1John @name.setter의 메소드를 변수처럼 사용하여 hidden_name을 변경하는 setter를 실행시킨다. 12p.name = 'Kevin'print(p.name) 1Kevin @Property만 사용한 read-only@property만 사용하고 setter를 사용하지 않으면, 외부에서 속성 변경이 불가한 read-only속성을 가진다. 12345678910111213class Circle: def __init__(self, radius): self.radius = radius @property def diameter(self): return 2 * self.radiuscircle = Circle(10)print(circle.diameter)circle.radius = 5print(circle.diameter) 122010 만약 속성을 변경하려 한다면, setter가 없기 때문에 에러가 발생한다. 1circle.diameter = 100 12345678---------------------------------------------------------------------------AttributeError Traceback (most recent call last)&lt;ipython-input-24-17341e80dce9&gt; in &lt;module&gt;() 14 print(circle.diameter) 15 ---&gt; 16 circle.diameter &#x3D; 100AttributeError: can&#39;t set attribute # 네임 스페이스인스턴스가 가지고 있는 자기 자신의 저장공간인스턴스들의 네임스페이스들은 각자 독립적이다.__dict__: 네임스페이스를 알수 있는 함수 123456789101112class WareHouse: # 클래스 변수 stock_num = 0 def __init__(self, name): self.name = name WareHouse.stock_num += 1 def __del__(self): WareHouse.stock_num -= 1user1 = WareHouse('Kim')user2 = WareHouse('Pard')user3 = WareHouse('Lee') 각 인스턴스들의 네임 스페이스를 출력 해보면 123print(user1.__dict__)print(user2.__dict__)print(user3.__dict__) 123&#123;&#39;name&#39;: &#39;Kim&#39;&#125;&#123;&#39;name&#39;: &#39;Pard&#39;&#125;&#123;&#39;name&#39;: &#39;Lee&#39;&#125; 클래스 변수: 직접 사용 가능, 객체 보다 먼저 생성, 공유 가능하다. 이때, 인스턴스들이 가지고 있지 않은 인스턴스 변수 외의 클래스 변수 값을 호출 할 수도 있다. class변수인 stock_num은 user1, user2, user3 이 인스턴스화 되면서 각자의 초기화 함수를 통해 값이 3번 변하였다. 123print(user1.stock_num)print(user2.stock_num)print(user3.stock_num) 123333 인스턴스에 존재하지 않는 변수를 호출하면 인스턴스 네임 스페이스에서 찾고, 없으면 마지막으로 클래스 네임스페이스에서 찾아 호출한다. # 객체(인스턴스) 삭제1del (객체(인스턴스))","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"클래스","slug":"클래스","permalink":"https://o-seok.github.io/tags/%ED%81%B4%EB%9E%98%EC%8A%A4/"}]},{"title":"파이썬 - 함수","slug":"python-function","date":"2020-05-19T13:41:44.000Z","updated":"2020-05-21T07:37:02.880Z","comments":true,"path":"2020/05/19/python-function/","link":"","permalink":"https://o-seok.github.io/2020/05/19/python-function/","excerpt":"","text":"어떠한 반복적이고 중복되는 프로그래밍을 피할 수 있다.하나의 기능을 하는 함수를 만들어야 좋다.함수로 전달한 값을 인자(argument)라고 부르며 이는 함수 내에 매개변수(parameter)에 복사한다. ⚠️ 함수 선언 위치함수를 사용할 위치보다 위에서 선언을 해주고, 선언한 위치보다 아래에서 사용한다. # 정의(def)함수는 입력 매개변수(parameter)로 모든 타입을 여러 개 취할 수 있다.함수 이름은 변수 이름과 동일한 정책함수 이름은 동사로 시작 추천매개변수 이름 의미있게 선택 12def 함수명(parameter): (실행할 코드) # 함수 호출 (call)함수명()함수(parameter) 간단한 호출12345def hello(word): print('Hello ', word)hello('Python!')hello(7777) 12Hello Python!Hello 7777 # return함수는 return 값을 가질 수 있다.함수가 명시적으로 return을 호출 하지 않으면 None을 호출 123456def hello_return(word): val = \"Hello \" + str(word) return valstr = hello_return(\"python!!!!!!!\")print(str) 1Hello python!!!!!!! 다중리턴12345678def func_mul(x): y1 = x * 100 y2 = x * 200 y3 = x * 300 return y1, y2, y3val1, val2, val3 = func_mul(100)print(type(val1), val2, val3) 1&lt;class &#39;int&#39;&gt; 20000 30000 다중리턴 (데이터타입 변환)12345678def func_mul2(x): y1 = x * 100 y2 = x * 200 y3 = x * 300 return [y1, y2, y3]lt = func_mul2(100)print(lt, type(lt)) 1[10000, 20000, 30000] &lt;class &#39;list&#39;&gt; # 힌트 함수인자를 어떤 타입을 받는지, 출력 값은 어떠한 데이터 타입인지 설명해주는 함수 1234567def func_mul3(x : int) -&gt; list: y1 = x * 100 y2 = x * 200 y3 = x * 300 return [y1, y2, y3]print(func_mul3(5)) 1[500, 1000, 1500] # *args매개변수가 몇개가 넘어올지 모를 때다양한 매개변수 형태를 받아서 함수의 흐름이 바뀌는 기능을 원할 때리턴 값은 튜플 형태로 나온다. 12345def args_func(*args): print(args)args_func('kim')args_func('kim','park') 12(&#39;kim&#39;,)(&#39;kim&#39;, &#39;park&#39;) 123456def args_func2(*args): for t in args: print(t)args_func2('kim')args_func2('kim','park') 123kimkimpark ✔️ enumerate()인덱스와 값을 같이 출력 해준다. 1234def args_func3(*args): for i, v in enumerate(*args): print(i, v)&gt;args_func3('kim', 'park') 123# 결과값&gt;0 kim&gt;1 park # **kwargs매개변수가 몇개가 넘어올지 모를 때다양한 매개변수 형태를 받아서 함수의 흐름이 바뀌는 기능을 원할 때딕셔너리형태의 인자를 받고, 딕셔너리형태로 리턴한다. 1234def kwargs_func(**kwargs): print(kwargs)kwargs_func(name1='kim', name2='Park', name3='Lee') 1&#123;&#39;name1&#39;: &#39;kim&#39;, &#39;name2&#39;: &#39;Park&#39;, &#39;name3&#39;: &#39;Lee&#39;&#125; dic에서 items()로 반복문을 사용하여 key와 value를 각각 출력 가능하다. 12345def kwargs_func2(**kwargs): for k, v in kwargs.items(): print(k, v)kwargs_func2(name1='kim', name2='Park', name3='Lee') 123name1 kimname2 Parkname3 Lee # (인자, args, *kwargs)혼합해서 사용 할 때arg1, arg2 : 필수인자args, *kwargs : 가상인자 12345def example_mul(arg1, arg2, *args, **kwargs): print(arg1, arg2, args, kwargs)example_mul(10, 20)example_mul(10, 20, 'park', 'kim', age1=24, age2=34) 1210 20 () &#123;&#125;10 20 (&#39;park&#39;, &#39;kim&#39;) &#123;&#39;age1&#39;: 24, &#39;age2&#39;: 34&#125; # 일등 시민: 함수파이썬은 모든 것이 객체(object)숫자, 문자열, tuple, list, dict, 함수 등 모두가 객체일등 시민은 함수를 변수에 할당 가능다른 함수에서 이를 인자로 사용 가능하고 이를 변환 가능 12345678910# *args, **kwargs 사용해서 인자 결합 가능def run(func, *args): print(func, args) # do_sum(1,2,3) return func(*args)def do_sum(*args): return sum(args)run(do_sum, 1, 2, 3) 16 # 내부 함수 (중첩함수/inner function)함수 안에 또 다른 함수 정의 가능가독성/확장성이 줄어들 수 있으므로 지양루프나 코드 중복을 피하기 위해 함수 내 복잡한 작업을 한번 이상 수행할 때 유용 1234567def do_sum(*args): def print_pretty(*args): return f'Result: &#123;sum(args)&#125;' return print_pretty(*args)do_sum(1, 2, 3) 1&#39;Result: 6&#39; # 클로져바깥 함수로부터 생성된 변수값을 변경하고 저장 할 수 있는 함수내부 함수는 클로져 처럼 행동 가능클로져는 다른 함수에 의해 동적으로 생성 123456789101112def do_sum(*args): def print_pretty(): return f'Result: &#123;sum(args)&#125;' return print_prettya = do_sum(1, 2, 3)print(a)b = do_sum(4, 5, 6)print(b)# a, b 모두 각각 사용된 인자값을 복사해서 저장중 12&lt;function do_sum.&lt;locals&gt;.print_pretty at 0x7efc56c59d90&gt;&lt;function do_sum.&lt;locals&gt;.print_pretty at 0x7efc56be52f0&gt; # 키워드 def / call type hinting parameter / argument args / *kwargs 내부함수 일등 시민: 함수 클로져","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"function","slug":"function","permalink":"https://o-seok.github.io/tags/function/"}]},{"title":"Hexo로 관리하는 github 블로그 👨🏻‍💻","slug":"hexo로-관리하는-github-블로그","date":"2020-05-10T13:52:14.000Z","updated":"2020-05-22T07:08:59.435Z","comments":true,"path":"2020/05/10/hexo로-관리하는-github-블로그/","link":"","permalink":"https://o-seok.github.io/2020/05/10/hexo%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-github-%EB%B8%94%EB%A1%9C%EA%B7%B8/","excerpt":"","text":"Hexo로 블로그를 관리해보자.Hexo Document를 참고하여 정리 했고, 자세한 사항은 사이트에서 확인 할 수 있다. # 준비단계github repository 만들기github에서 (user name).github.io repository를 만든다. ( 나의 경우는 O-Seok.github.io )clone하여 내 로컬에도 환경을 만들어 놓는다. node 설치하기Hexo는 node.js 기반의 정적 사이트 생성기의 일종이므로 node를 설치해준다. 1$ brew install node # hexo 설치hexo를 설치 해준다. npm install -g hexo-cli 해도 되지만권한이 필요한 경우 sudo를 붙여서 설치해준다. 1$ sudo npm install -g hexo-cli hexo 블로그로 이용할 폴더의 hexo를 초기화 시켜준다.내 폴더 이름은 YSblog라 했다. 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 로컬영역에서 hexo server를 구동시킨다.http://localhost:4000 로 접속해서 확인한다. 1$ hexo server 123claudjung@jeong-yeongseog-ui-MacBookPro YSblog % hexo serverINFO Start processingINFO Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop. # 첫 포스트 작성hexo 설치가 잘 되었다면 포스팅을 해본다.포스트 생성 1$ hexo new post &quot;title&quot; 123claudjung@jeong-yeongseog-ui-MacBookPro YSblog % hexo new post first-postingINFO Created: ~&#x2F;Documents&#x2F;dev&#x2F;YSblog&#x2F;source&#x2F;_posts&#x2F;first-posting.mdclaudjung@jeong-yeongseog-ui-MacBookPro YSblog % 해당 위치에서 vscode를 열어 포스트를 편집한다. hexo clean : 정리를 한번 해준다.hexo generate : git의 commit 느낌hexo deploy : git의 push의 느낌이랄까.. 순서대로(hexo clean -&gt; hexo generate -&gt; hexo deploy) 명령을 해주고 hexo server를 구동로컬에서 포스팅이 되었는지 확인해준다. # (User name).github.io 와 연동시키기이제 나의 github에 있는 O-Seok.github.io를 hexo로 관리하기 위해서 연동시켜보자. 설정hexo-deployer-git 을 설치한다. 1$ npm install hexo-deployer-git --save _config.yml 을 편집한다. 1234567891011121314151617claudjung@jeong-yeongseog-ui-MacBookPro YSblog % ls -altotal 232drwxr-xr-x 14 claudjung staff 448 5 6 02:18 .drwxr-xr-x 8 claudjung staff 256 5 4 15:20 ..drwxr-xr-x 9 claudjung staff 288 5 6 02:18 .deploy_git-rw-r--r-- 1 claudjung staff 65 5 4 15:20 .gitignore-rw-r--r-- 1 claudjung staff 2423 5 6 02:06 _config.yml-rw-r--r-- 1 claudjung staff 26113 5 6 02:34 db.jsondrwxr-xr-x 3 claudjung staff 96 5 4 15:33 imgdrwxr-xr-x 202 claudjung staff 6464 5 4 15:46 node_modules-rw-r--r-- 1 claudjung staff 74015 5 4 15:46 package-lock.json-rw-r--r-- 1 claudjung staff 617 5 4 15:46 package.jsondrwxr-xr-x 8 claudjung staff 256 5 6 02:18 publicdrwxr-xr-x 5 claudjung staff 160 5 4 15:20 scaffoldsdrwxr-xr-x 3 claudjung staff 96 5 4 15:20 sourcedrwxr-xr-x 4 claudjung staff 128 5 4 16:58 themesclaudjung@jeong-yeongseog-ui-MacBookPro YSblog % vim _config.yml 먼저 URL의 url: 부분을 나의 github.io repository 이름으로 수정해준다. 123456789# URL## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;url: https:&#x2F;&#x2F;O-Seok.github.ioroot: &#x2F;permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks vim의 insert 모드로 변환 후, #Deployment 의type: : gitrepo: : https://github.com/(User name)/(User name).github.io.git수정해준다. ⚠️ 주의type, repo 는 앞에서 2칸을 띄우고 작성한다.이후엔 한칸을 띄우고 작성한다.(이것은 약속! 이렇게 해야 적용이 된다.) 12345# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;O-Seok&#x2F;O-Seok.github.io.git 다음으로 hexo clean , hexo generate, hexo deploy 를 순서대로 명령해준다.hexo로 관리하던 블로그용 폴더 안의 파일들이 github의 github.io repository에 덮어 씌여진다. 브라우저 url에 블로그 주소를 입력하면 hexo가 된 것을 확인 할 수 있다.BRAVO ~~ !!! 👏🏼 # 키워드 sudo npm install -g hexo-cli hexo init hexo new post serer, clean, generate, deploy .config_yml url: deploy: type: , repo: 설정 법칙","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://o-seok.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://o-seok.github.io/tags/blog/"},{"name":"github","slug":"github","permalink":"https://o-seok.github.io/tags/github/"}]},{"title":"CSV 파일 read시 UnicodeDecodeError 인코딩 오류 대처하기","slug":"CSV-파일-read시-UnicodeDecodeError-인코딩-오류-대처하기","date":"2020-05-09T07:02:10.000Z","updated":"2020-05-21T07:42:43.217Z","comments":true,"path":"2020/05/09/CSV-파일-read시-UnicodeDecodeError-인코딩-오류-대처하기/","link":"","permalink":"https://o-seok.github.io/2020/05/09/CSV-%ED%8C%8C%EC%9D%BC-read%EC%8B%9C-UnicodeDecodeError-%EC%9D%B8%EC%BD%94%EB%94%A9-%EC%98%A4%EB%A5%98-%EB%8C%80%EC%B2%98%ED%95%98%EA%B8%B0/","excerpt":"","text":"파이썬으로 csv 파일을 읽어오는데 인코딩 오류 발생했다. 1234567import csvwith open('./resource/sample1.csv', 'r') as f: reader = csv.reader(f) for c in reader: print(c) 유니코드 에러 내용: 1UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xb9 in position 0: invalid start byte 다음과 같은 경우 드물게 발생한다고 한다 EUC-KR과 CP949를 구분하는 경우 EUC-KR만을 지원하는 프로그램에서 CP949로 작성된 텍스트 파일을 여는 경우 쉽게 말해 지금 나의 파이썬 인코딩 설정 환경과 데이터 파일을 인코딩하는 설정 환경이 잘 안맞아서 그렇다는 것! # 해결방법오류 관련 서치 중 encoding=&#39;CP949&#39; 옵션을 넣어주면 깔끔하게 해결이 된 다는 것을 알게 되었다. 내 코드에 바로 적용해 보면 1234567import csvwith open('./resource/sample1.csv', 'r', encoding='CP949') as f: reader = csv.reader(f) for c in reader: print(c) 지정한 csv 파일을 잘 읽어온다!!! 😎🤟🏼 1234567891011[&#39;번호&#39;, &#39;이름&#39;, &#39;가입일시&#39;, &#39;나이&#39;][&#39;1&#39;, &#39;김정수&#39;, &#39;2017-01-19 11:30:00&#39;, &#39;25&#39;][&#39;2&#39;, &#39;박민구&#39;, &#39;2017-02-07 10:22:00&#39;, &#39;35&#39;][&#39;3&#39;, &#39;정순미&#39;, &#39;2017-01-22 09:10:00&#39;, &#39;33&#39;][&#39;4&#39;, &#39;김정현&#39;, &#39;2017-02-22 14:09:00&#39;, &#39;45&#39;][&#39;5&#39;, &#39;홍미진&#39;, &#39;2017-04-01 18:00:00&#39;, &#39;17&#39;][&#39;6&#39;, &#39;김순철&#39;, &#39;2017-05-14 22:33:07&#39;, &#39;22&#39;][&#39;7&#39;, &#39;이동철&#39;, &#39;2017-03-01 23:44:45&#39;, &#39;27&#39;][&#39;8&#39;, &#39;박지숙&#39;, &#39;2017-01-11 06:04:18&#39;, &#39;30&#39;][&#39;9&#39;, &#39;김은미&#39;, &#39;2017-02-08 07:44:33&#39;, &#39;51&#39;][&#39;10&#39;, &#39;장혁철&#39;, &#39;2017-12-01 13:01:11&#39;, &#39;16&#39;] # 키워드 UnicodeDecodeError encoding=’CP949’","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"csv","slug":"csv","permalink":"https://o-seok.github.io/tags/csv/"},{"name":"UnicodeDecodeError","slug":"UnicodeDecodeError","permalink":"https://o-seok.github.io/tags/UnicodeDecodeError/"}]}],"categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://o-seok.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://o-seok.github.io/tags/blog/"},{"name":"hueman","slug":"hueman","permalink":"https://o-seok.github.io/tags/hueman/"},{"name":"theme","slug":"theme","permalink":"https://o-seok.github.io/tags/theme/"},{"name":"layout","slug":"layout","permalink":"https://o-seok.github.io/tags/layout/"},{"name":"css","slug":"css","permalink":"https://o-seok.github.io/tags/css/"},{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"클래스","slug":"클래스","permalink":"https://o-seok.github.io/tags/%ED%81%B4%EB%9E%98%EC%8A%A4/"},{"name":"function","slug":"function","permalink":"https://o-seok.github.io/tags/function/"},{"name":"github","slug":"github","permalink":"https://o-seok.github.io/tags/github/"},{"name":"csv","slug":"csv","permalink":"https://o-seok.github.io/tags/csv/"},{"name":"UnicodeDecodeError","slug":"UnicodeDecodeError","permalink":"https://o-seok.github.io/tags/UnicodeDecodeError/"}]}