{"meta":{"title":"O-Seok 개발일지","subtitle":"","description":"","author":"O-Seok","url":"https://O-Seok.github.io","root":"/"},"pages":[],"posts":[{"title":"패키지 & 모듈","slug":"python-package-module","date":"2020-05-25T13:48:13.000Z","updated":"2020-05-25T13:57:24.423Z","comments":true,"path":"2020/05/25/python-package-module/","link":"","permalink":"https://o-seok.github.io/2020/05/25/python-package-module/","excerpt":"","text":"Package는 도트(.)를 사용하여 파이썬 모듈들을 디렉토리 구조로 관리할 수 있게 해준다.파이썬 패키지는 디렉토리와 파이썬 모듈로 이루어진다. 간단한 예시로 보면 음식 디렉토리는 맛.py, 크기.py 모듈을 가진 패키지옷 디렉토리는 계절구분.py 모듈을 가진 패키지전자제품 디렉토리는 스펙 모듈을 가진 패키지 # package 사용다음과 같이 패키지와 안에 모듈이 있다. fibonacci.py 모듈 123456789101112131415161718class Fibonacci: def __init__(self, title=\"fibonacci\"): self.title = title def fib(n): a, b = 0, 1 while a &lt; n: print(a, end=' ') a, b = b, a+b print() def fib2(n): result = [] a, b = 0, 1 while a &lt; n: result.append(a) a, b = b, a+b return result calculations.py 모듈 12345678def add(l, r): return 1 + rdef mul(l, r): return 1 * rdef div(l, r): return 1 / r prints.py 모듈 12345def prt1(): print(\"I'm Niceboy!\")def prt2(): print(\"I'm GoodBoy!\") 현재 작업하는 위치에서 pkg 패키지 안에 모듈을 사용하고 싶으면 다음과 같은 방법 들로 사용할 수 있다. fibonacci.py 안의 Fibonacci 클래스 사용 123456from pkg.fibonacci import FibonacciFibonacci.fib(300)print(\"ex1 : \", Fibonacci.fib2(400))print(\"ex1 : \", Fibonacci().title) fibonacci.py 안의 모든 것들을 사용하고 싶을 때 (추천 X) 123456from pkg.fibonacci import *Fibonacci.fib(500)print(\"ex2 : \", Fibonacci.fib2(500))print(\"ex2 : \", Fibonacci().title) Alias모듈들을 가져다 쓸 때, 정의된 이름을 그대로 사용하기 보단 간략하게 줄여 사용할 때 사용한다. 123456from pkg.fibonacci import Fibonacci as fbfb.fib(1000)print(\"ex3 : \", fb.fib2(500))print(\"ex3 : \", fb().title) calculations.py 안의 함수들을 사용하면 1234import pkg.calculations as cprint(\"ex4: \", c.add(10, 100))print(\"ex4: \", c.mul(10, 100)) calculations.py 안의 함수들 중에 특정한 함수만 사용하려면 123from pkg.calculations import div as dprint(\"ex5: \", int(d(100, 10)))","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"package","slug":"package","permalink":"https://o-seok.github.io/tags/package/"},{"name":"module","slug":"module","permalink":"https://o-seok.github.io/tags/module/"}]},{"title":"상속 (inheritance)","slug":"python-class-inheritance","date":"2020-05-24T11:35:30.000Z","updated":"2020-05-24T11:41:21.553Z","comments":true,"path":"2020/05/24/python-class-inheritance/","link":"","permalink":"https://o-seok.github.io/2020/05/24/python-class-inheritance/","excerpt":"","text":"클래스는 상속을 받아 부모 클래스의 속성과 메소드들을 사용 할 수 있다. # 상속부모 클래스 를 정의 한다. 12345678class Car: \"\"\"Parent Class\"\"\" def __init__(self, tp, color): self.type = tp self.color = color def show(self): return 'Car Class \"Show Method!\"' super(): 상속 받은 클래스(부모)의 속성이나 메소드를 호출 할 때 사용한다. 클래스를 선언 하고 상속받을 클래스를 인자로 주어 상속을 받는다. 12345678class BmwCar(Car): \"\"\"Sub Class\"\"\" def __init__(self, car_name, tp, color): super().__init__(tp, color) self.car_name = car_name def show_model(self) -&gt; None: return \"Your Car Name: %s\" %self.car_name 상속받은 클래스123456789# 일반 사용model1 = BmwCar('520d', 'sedan', 'red')print(model1.color) # superprint(model1.type) # superprint(model1.car_name) # subprint(model1.show()) # superprint(model1.show_model()) # subprint(model1.__dict__) 123456redsedan520dCar Class &quot;Show Method!&quot;Your Car Name: 520d&#123;&#39;type&#39;: &#39;sedan&#39;, &#39;color&#39;: &#39;red&#39;, &#39;car_name&#39;: &#39;520d&#39;&#125; # 오버라이딩부모의 메소드 함수와 똑같은 이름의 메소드를 정의 하고 원하는 동작형태로 다시 작성하여 사용 하는 것을 말한다. 부모 클래스 12345678class Car: \"\"\"Parent Class\"\"\" def __init__(self, tp, color): self.type = tp self.color = color def show(self): return 'Car Class \"Show Method!\"' 상속을 받고, 부모의 메소드 show(self)를 재정의 하여 선언한다. 123456789101112class BenzCar(Car): \"\"\"Sub Class\"\"\" def __init__(self, car_name, tp, color): super().__init__(tp, color) self.car_name = car_name def show_model(self) -&gt; None: return \"Your Car Name: %s\" %self.car_name def show(self): print(super().show()) return 'Car Info : %s %s %s' %(self.car_name, self.type, self.color) 비교를 위해 자식이 오버라이딩한 메소드에 원래 부모의 메소드도 호출 하였다. 12model3 = BenzCar('350s', 'sedan', 'silver')print(model3.show()) 자식 메소드에서 오버라이딩이 일어난 것을 볼 수 있다. 12345# 부모 show()Car Class &quot;Show Method!&quot;# 오버라이딩 show()Car Info : 350s sedan silver # 다중상속상속은 여러번 일어나게 할 수 있다.무분별한 다수의 상속은 후에 수정 보완할 때 큰 어려움을 겪을 수 있다. mro(): 상속 관계를 나타내주는 함수 1234567891011121314151617class X: passclass Y: passclass Z: passclass A(X, Y): passclass B(Y, Z): passclass M(B, A, Z): pass A의 상속 관계 1print(A.mro()) 1[&lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;__main__.X&#39;&gt;, &lt;class &#39;__main__.Y&#39;&gt;, &lt;class &#39;object&#39;&gt;] M의 상속 관계 1print(M.mro()) 1[&lt;class &#39;__main__.M&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;__main__.X&#39;&gt;, &lt;class &#39;__main__.Y&#39;&gt;, &lt;class &#39;__main__.Z&#39;&gt;, &lt;class &#39;object&#39;&gt;] 복잡하다….🤮","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"class","slug":"class","permalink":"https://o-seok.github.io/tags/class/"}]},{"title":"클래스 (class)","slug":"파이썬-클래스","date":"2020-05-24T11:31:45.000Z","updated":"2020-05-24T11:32:02.411Z","comments":true,"path":"2020/05/24/파이썬-클래스/","link":"","permalink":"https://o-seok.github.io/2020/05/24/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4/","excerpt":"","text":"클래스는 객체의 구조와 행동을 정의 한다.객체의 클래스는 초기화를 통해 제어 한다.클래스는 복잡한 문제를 다루기 쉽도록 한다. ✔️ class, 객체(object), 인스턴스(instance)객체(object) 는 소프트웨어 세계에 구현할 대상이고, 이를 구현하기 위한 설계도가 class 이며, 설계도에 따라 소프트웨어 세계에 구현된 실체가 인스턴스(instance) 이다. 보통 인스턴스를 객체라고도 부른다. # 클래스 정의 (class)class 키워드를 사용하여 새로운 클래스를 선언한다.파이썬 대부분이 네이밍컨벤션이 단어와 단어 사이에 _를 넣는다면 클래스의 네이명 컨벤션은 CamelCase로 한다. 123class ClassInfo: def __init__(self): print(\"초기화\") 생성자와 인스턴스인스턴스: 변수에 클래스를 할당 하는 것. 객체가 메모리상에 할당이 되는 것생성자: 변수에 클래스를 할당할 때 쓰인다. 인스턴스 할 때 사용하는 것 12345class ClassInfo: def __init__(self): print(\"초기화\")cInfo = ClassInfo() cInfo : 변수ClassInfo() : 생성자 # 초기화자(initializing)객체(인스턴스)가 생성되고 나면 __init__ 메소드를 호출하여 객체에서 사용할 값들을 초기화 한다.객체에 초기화된 변수들, 인스턴스 변수 들을 호출 할 수 있다. 123456789101112class UserInfo: def __init__(self, name, height, weight): self.name = name self.height = height self.weight = weightuser1 = UserInfo(\"Kim\", 190, 80)print(user1.name)print(user1.height)print(user1.weight) 123Kim19080 # 메소드 타입 (self / cls)인스턴스 함수(메소드) 인스턴스화 되었을 떄 접근/사용 가능 self를 인자로 받음 클래스 함수(메소드) 클래스 안에 존재하기 때문에 공유 가능 cls를 인자로 받음 메소드 위에 @classmethod 를 붙여서 사용 123456789101112131415161718class Person: count = 0 def __init__(self): # self.count 가 아니라 Person.count 접근 Person.count += 1 @classmethod def call(cls): # Person.count가 아니라 cls.count 접근 print('Class method all:', cls.count)a = Person()b = Person()c = Person()Person.call() a, b, c 객체들이 인스턴스화 되면서 클래스 변수 count값을 각각 __init__() 에서 1씩 증가 시켰기 떄문에 출력해보면 3이 된다. 1Class method all: 3 # get/set 속성값과 propertyOOP 언어에서 private 속성을 위해 getter/setter 메소드 제공파이썬에선 getter/setter 메소드 불필요모든 속성과 메소드는 public 이며 필요에 따라서 property 사용가능 @property , @[데코레이터] 사용@property : getter의 역할로 사용될 메소드 위에 데코레이터로 사용해준다. 변수로서의 사용을 가능하게 해준다.@(getter역할의 메소드 이름).setter : getter역할의 메소드의 setter역할을 해주는 메소드위에 사용해준다. 변수로서의 사용을 가능하게 해준다. ⚠️ @property 와 @(getter역할의 메소드 이름).setter getter와 setter역할을 하는 메소드의 이름은 동일하게 해주어야 한다. @().setter의 ()에는 @property의 메소드 이름을 붙여준다. 1234567891011121314class Person: def __init__(self, name): self.hidden_name = name @property def name(self): return self.hidden_name @name.setter def name(self, name): self.hidden_name = name # 객체 p = Person('John') @property를 데코레이터로 사용해주면 메소드를 변수처럼 사용할 수 있다. 1print(p.name) 1John @name.setter의 메소드를 변수처럼 사용하여 hidden_name을 변경하는 setter를 실행시킨다. 12p.name = 'Kevin'print(p.name) 1Kevin @Property만 사용한 read-only@property만 사용하고 setter를 사용하지 않으면, 외부에서 속성 변경이 불가한 read-only속성을 가진다. 12345678910111213class Circle: def __init__(self, radius): self.radius = radius @property def diameter(self): return 2 * self.radiuscircle = Circle(10)print(circle.diameter)circle.radius = 5print(circle.diameter) 122010 만약 속성을 변경하려 한다면, setter가 없기 때문에 에러가 발생한다. 1circle.diameter = 100 12345678---------------------------------------------------------------------------AttributeError Traceback (most recent call last)&lt;ipython-input-24-17341e80dce9&gt; in &lt;module&gt;() 14 print(circle.diameter) 15 ---&gt; 16 circle.diameter &#x3D; 100AttributeError: can&#39;t set attribute # 네임 스페이스인스턴스가 가지고 있는 자기 자신의 저장공간인스턴스들의 네임스페이스들은 각자 독립적이다.__dict__: 네임스페이스를 알수 있는 함수 123456789101112class WareHouse: # 클래스 변수 stock_num = 0 def __init__(self, name): self.name = name WareHouse.stock_num += 1 def __del__(self): WareHouse.stock_num -= 1user1 = WareHouse('Kim')user2 = WareHouse('Pard')user3 = WareHouse('Lee') 각 인스턴스들의 네임 스페이스를 출력 해보면 123print(user1.__dict__)print(user2.__dict__)print(user3.__dict__) 123&#123;&#39;name&#39;: &#39;Kim&#39;&#125;&#123;&#39;name&#39;: &#39;Pard&#39;&#125;&#123;&#39;name&#39;: &#39;Lee&#39;&#125; 클래스 변수: 직접 사용 가능, 객체 보다 먼저 생성, 공유 가능하다. 이때, 인스턴스들이 가지고 있지 않은 인스턴스 변수 외의 클래스 변수 값을 호출 할 수도 있다. class변수인 stock_num은 user1, user2, user3 이 인스턴스화 되면서 각자의 초기화 함수를 통해 값이 3번 변하였다. 123print(user1.stock_num)print(user2.stock_num)print(user3.stock_num) 123333 인스턴스에 존재하지 않는 변수를 호출하면 인스턴스 네임 스페이스에서 찾고, 없으면 마지막으로 클래스 네임스페이스에서 찾아 호출한다. # 객체(인스턴스) 삭제1del (객체(인스턴스))","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"class","slug":"class","permalink":"https://o-seok.github.io/tags/class/"}]},{"title":"반복문 (while)","slug":"python-control-while","date":"2020-05-24T11:26:26.000Z","updated":"2020-05-24T11:31:17.952Z","comments":true,"path":"2020/05/24/python-control-while/","link":"","permalink":"https://o-seok.github.io/2020/05/24/python-control-while/","excerpt":"","text":"while문은 제어문에서 반복문이다.어떠한 조건 안에 반복하면서 데이터 값을 처리한다. 기본형식12while (변수) (조건): (조건 동안 반복하면서 처리할 동작) 간단한 예를 보면 1234v1 = 1while v1 &lt; 11: print('v1 is : ', v1) v1 += 1 12345678910v1 is : 1v1 is : 2v1 is : 3v1 is : 4v1 is : 5v1 is : 6v1 is : 7v1 is : 8v1 is : 9v1 is : 10","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"while","slug":"while","permalink":"https://o-seok.github.io/tags/while/"}]},{"title":"반복문 (for)","slug":"python-control-for","date":"2020-05-24T11:24:18.000Z","updated":"2020-05-24T11:25:07.665Z","comments":true,"path":"2020/05/24/python-control-for/","link":"","permalink":"https://o-seok.github.io/2020/05/24/python-control-for/","excerpt":"","text":"for문은 제어문에서 반복문이다.범위를 주어주고 범위동안 반복하면서 데이터 처리를 할 때 사용한다. 기본형식12for () in (조건범위): (범위동안 반복하면서 처리하는 동작) 간단한 예를 보면 123# 0 ~ 9 까지 반복을 하고 싶다면,for v2 in range(10): print('v2 is : ',v2) 12345678910111213141516171819v2 is : 0v2 is : 1v2 is : 2v2 is : 3v2 is : 4v2 is : 5v2 is : 6v2 is : 7v2 is : 8v2 is : 9v3 is : 1v3 is : 2v3 is : 3v3 is : 4v3 is : 5v3 is : 6v3 is : 7v3 is : 8v3 is : 9 12345678# 1부터 100까지의 합print()print('1부터 100까지의 합 구하기 ( for문 이용 )')score = 0for num in range(1, 101): score += num print(score) 15050 # 시퀀스 (순서가 있는) 자료형 반복문자열, 리스트, 튜플, 집합, 딕셔너리 리스트1234names = ['Kim', 'Park', 'Cho', 'Yoo', 'Choi']for v in names: print('You are : \"', v) 12345You are : &quot; KimYou are : &quot; ParkYou are : &quot; ChoYou are : &quot; YooYou are : &quot; Choi 문자열1234word = \"dreams\"for s in word: print('word : \"', s) 123456word : &quot; dword : &quot; rword : &quot; eword : &quot; aword : &quot; mword : &quot; s 딕셔너리12345my_info = &#123; 'name': 'Kim', 'age': 33, 'city': 'Seoul' &#125; 123# 기본 값은 키를 리턴한다.for key in my_info: print('my_info', key) 123my_info namemy_info agemy_info city 123# 값for value in my_info.values(): print('my_info_value', value) 123my_info_value Kimmy_info_value 33my_info_value Seoul 123# 키for key in my_info.keys(): print('my_info_key', value) 123my_info_key Seoulmy_info_key Seoulmy_info_key Seoul 123# 키 + 값for item in my_info.items(): print('my_info_item', item) 123my_info_item (&#39;name&#39;, &#39;Kim&#39;)my_info_item (&#39;age&#39;, 33)my_info_item (&#39;city&#39;, &#39;Seoul&#39;) # breakfor문 안에서 사용된다.내가 찾고자 하는 값이 반복문으로 돌아가는 중간에 있다면?내가 의도하는, 원하는 조건, 값이 나왔을 때 반복문에서 나올 때 사용한다. 12345678numbers = [14, 3, 4, 7, 10, 24, 17, 2, 33, 15, 34, 44, 38]for num in numbers: if num == 33: print('found : 33 !') break else: print('not found : 33 !!') 123456789not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!found : 33 ! # for - elsefor 문을 다 실행하고 마지막에 else가 실행이 된다.for 문 안에 break 구문이 작동이 되었다면, else 구문이 실행이 안된다.break문이 작동되지 않았다면 마지막에 else 구문이 작동된다. 12345678910numbers2 = [14, 3, 4, 7, 10, 24, 17, 2, 37, 15, 34, 44, 38]for num in numbers2: if num == 33: print('found : 33 !') break else: print('not found : 33 !!')else: print('not found 33 ..............') 1234567891011121314not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!not found : 33 !!not found 33 .............. # continuefor문 안에 사용된다.continue를 만나면 그 값은 넘어가고 다음 순서대로 간다.조건문이 아닌 for문, 반복문으로 간다. 12345678lt = ['1', 2, 5, True, 4.3, complex(4)]for v in lt: if type(v) is float: continue print('타입 : ', type(v))else: print('End') 123456타입 : &lt;class &#39;str&#39;&gt;타입 : &lt;class &#39;int&#39;&gt;타입 : &lt;class &#39;int&#39;&gt;타입 : &lt;class &#39;bool&#39;&gt;타입 : &lt;class &#39;complex&#39;&gt;End","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"for","slug":"for","permalink":"https://o-seok.github.io/tags/for/"}]},{"title":"조건문 (if)","slug":"python-control-if","date":"2020-05-24T11:18:55.000Z","updated":"2020-05-24T11:20:45.646Z","comments":true,"path":"2020/05/24/python-control-if/","link":"","permalink":"https://o-seok.github.io/2020/05/24/python-control-if/","excerpt":"","text":"어떠한 데이터 처리를 할 때, 조건을 걸어서 원하는 데이터 값을 처리할 수 있다. # if12345# 기본 구조if (조건): (원하는 조건의 동작)else: (위의 원하는 조건이 충족하지 못할 시 동작) 123456789101112131415print(type(True), type(False))print('boolean')# example 1if True: print('Yes')# example 2if False: print('No')# example 3if False: print('No')else: print('Yes') 1234&lt;class &#39;bool&#39;&gt; &lt;class &#39;bool&#39;&gt;booleanYesYes 관계연산자 조건출력1234567891011# 관계연산자# &gt;, &gt;=, &lt;, &lt;=, ==, !=a = 10b = 0print(a == b)print(a != b)print(a &gt; b)print( a &gt;= b)print(a &lt; b)print( a&lt;= b) 123456FalseTrueTrueTrueFalseFalse True, FalseTure: “내용”, [내용], (내용), {내용}, 1, TrueFalse: “”, [], (), {}, 0, False 12345city = \"\"if city: print(\"True\")else: print(\"False\") 1False # 논리 연산자and, or, not 123456789a = 100b = 60c = 15print('and : ', a &gt; b and b &gt; 3)print('or : ', a &gt; b or c &gt; b)print('not : ', not a &gt; b)print(not False)print(not True) 12345and : Trueor : Truenot : FalseTrueFalse 연산자 우선순위산술 &gt; 관계 &gt; 논리 순서로 적용 1print('ex1 : ', 5 + 10 &gt; 0 and not 7 + 3 == 10) 1ex1 : False 1234567score1 = 90score2 = 'A'if score1 &gt;= 90 and score2 == 'A': print('합격 하셨습니다.')else: print('죄송합니다. 불합격입니다.') 1합격 하셨습니다. # 다중 조건문여러가지 조건을 줄 때 사용한다.elif 12345678910num = 70if num &gt;= 90: print('num 등급 A', num)elif num &gt;= 80: print('num 등급 B', num)elif num &gt;= 70: print('num 등급 C', num)else: print('꽝') 1num 등급 C 70 # 중첩 조건문조건문 안에 조건문을 더 넣어 줄 수 있다. 123456789101112age = 27height = 175if age &gt;= 20: if height &gt;= 170: print('A지망 지원 가능') elif height &gt;= 160: print('B지망 지원 가능') else: print('지원 불가')else: print('20세 이상 지원 가능') 1A지망 지원 가능","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"if","slug":"if","permalink":"https://o-seok.github.io/tags/if/"}]},{"title":"집합 (set)","slug":"python-datatype-set","date":"2020-05-24T10:58:38.000Z","updated":"2020-05-24T11:18:37.441Z","comments":true,"path":"2020/05/24/python-datatype-set/","link":"","permalink":"https://o-seok.github.io/2020/05/24/python-datatype-set/","excerpt":"","text":"set은 mutable 속성을 가진다.순서 X, 중복 X, 수정 O, 삭제 O # set 선언123456a = set()b = set([1, 2, 3, 4])c = set([1, 4, 5, 6, 6])print(type(a))print(c) 12&lt;class &#39;set&#39;&gt;&#123;1, 4, 5, 6&#125; # set 데이터 처리set은 보통 list나 tuple로 형변환을 하여 데이터 처리를 한다. 1234t = tuple(b)print(t)l = list(b)print(l) 12(1, 2, 3, 4)[1, 2, 3, 4] # set 함수12s1 = set([1, 2, 3, 4, 5, 6])s2 = set([4, 5, 6, 7, 8, 9]) 교집합123# 교집합print(s1.intersection(s2))print(s1 &amp; s2) 12&#123;4, 5, 6&#125;&#123;4, 5, 6&#125; 합집합123# 합집합print(s1 | s2)print(s1.union(s2)) 12&#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;&#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125; 차집합12print(s1 - s2)print(s1.difference(s2)) 12&#123;1, 2, 3&#125;&#123;1, 2, 3&#125; set 추가12s3 = set([7, 8, 9, 10, 15])s3.add(18) 1&#123;7, 8, 9, 10, 15, 18&#125; set 제거12s3.remove(15)print(s3) 1&#123;7, 8, 9, 10, 18&#125;","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"datatype","slug":"datatype","permalink":"https://o-seok.github.io/tags/datatype/"},{"name":"set","slug":"set","permalink":"https://o-seok.github.io/tags/set/"}]},{"title":"딕셔너리 (dict)","slug":"python-datatype-dict","date":"2020-05-24T10:55:50.000Z","updated":"2020-05-24T10:56:38.489Z","comments":true,"path":"2020/05/24/python-datatype-dict/","link":"","permalink":"https://o-seok.github.io/2020/05/24/python-datatype-dict/","excerpt":"","text":"딕셔너리는 mutable 속성을 가진다.중복 X (key: 중복 X, value: 중복 O), 순서 X, 수정 O, 삭제 O # 딕셔너리 선언딕셔너리는 다음과 같은 방법으로 선언 해줄 수 있다. 12345678a = &#123;'name': 'Jeong', 'phone': '010-9999-9999', 'birth': '890928'&#125;b = &#123;0: 'Hello Python', 1: 'Hello Coding'&#125;c = &#123;'arr':[1, 2, 3, 4, 5]&#125;print(type(a))print(a)print(b)print(c) 1234&lt;class &#39;dict&#39;&gt;&#123;&#39;name&#39;: &#39;Jeong&#39;, &#39;phone&#39;: &#39;010-9999-9999&#39;, &#39;birth&#39;: &#39;890928&#39;&#125;&#123;0: &#39;Hello Python&#39;, 1: &#39;Hello Coding&#39;&#125;&#123;&#39;arr&#39;: [1, 2, 3, 4, 5]&#125; # 딕셔너리 출력특정 key를 선택하여 value 값을 출력 할 수도get() 함수로 key를 지정하여 또는 슬라이싱을 통해서 값을 출력 할 수도 있다. 12345print(a['name'])print(a.get('name'))print(a.get('address'))print(c.get('arr'))print(c.get('arr')[1:3]) 12345JeongJeongNone[1, 2, 3, 4, 5][2, 3] boolean 출력 값을 출력 할 수도 있다. 123print(2 in b)print(2 not in b)print('name' in a) 123FalseTrueTrue # 딕셔너리 추가직관적으로 추가를 할 수 있다. 12345a['address'] = 'Seoul'print(a)a['rank'] = [1, 2, 3]a['rank2'] = (1, 2, 3,)print(a) 12&#123;&#39;name&#39;: &#39;Jeong&#39;, &#39;phone&#39;: &#39;010-9999-9999&#39;, &#39;birth&#39;: &#39;890928&#39;, &#39;address&#39;: &#39;Seoul&#39;&#125;&#123;&#39;name&#39;: &#39;Jeong&#39;, &#39;phone&#39;: &#39;010-9999-9999&#39;, &#39;birth&#39;: &#39;890928&#39;, &#39;address&#39;: &#39;Seoul&#39;, &#39;rank&#39;: [1, 2, 3], &#39;rank2&#39;: (1, 2, 3)&#125; # keys(), values(), items()keys(), values()딕셔너리에서 값들을 처리할 때,keys(): key 값들만 list의 형태로 값을 반환values(): value 값들만 list의 형태로 값을 반환 ⚠️ keys(), values() 값들은 list 형태의 값으로 출력 되지만, 출력 된 값들을 사용하려면 list() 함수를 이용하여 list로 형변환 하여 데이터 처리를 한다. 12print(a.keys()) print(list(a.keys())) 12dict_keys([&#39;name&#39;, &#39;phone&#39;, &#39;birth&#39;, &#39;address&#39;, &#39;rank&#39;, &#39;rank2&#39;])[&#39;name&#39;, &#39;phone&#39;, &#39;birth&#39;, &#39;address&#39;, &#39;rank&#39;, &#39;rank2&#39;] list로 형변환 이후 데이터 처리를 할 수 있다. 12temp = list(a.keys())print(temp[1:3]) 1[&#39;phone&#39;, &#39;birth&#39;] items()items()는 key와 value를 한 쌍으로 갖는 튜플 형식으로 값을 반환한다. 1print(a.items()) 1dict_items([(&#39;name&#39;, &#39;Jeong&#39;), (&#39;phone&#39;, &#39;010-9999-9999&#39;), (&#39;birth&#39;, &#39;890928&#39;), (&#39;address&#39;, &#39;Seoul&#39;), (&#39;rank&#39;, [1, 2, 3]), (&#39;rank2&#39;, (1, 2, 3))]) list로 형변환을 해준 후 1print(list(a.items())) 1[(&#39;name&#39;, &#39;Jeong&#39;), (&#39;phone&#39;, &#39;010-9999-9999&#39;), (&#39;birth&#39;, &#39;890928&#39;), (&#39;address&#39;, &#39;Seoul&#39;), (&#39;rank&#39;, [1, 2, 3]), (&#39;rank2&#39;, (1, 2, 3))] 원하는 데이터 처리를 할 수 있다. 1234tems = list(a.items())print(tems[0])print(tems[0][0])print(tems[0][0][:2]) 123(&#39;name&#39;, &#39;Jeong&#39;)namena","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"datatype","slug":"datatype","permalink":"https://o-seok.github.io/tags/datatype/"},{"name":"dict","slug":"dict","permalink":"https://o-seok.github.io/tags/dict/"}]},{"title":"튜플 (tuple)","slug":"python-datatype-tuple","date":"2020-05-24T10:50:58.000Z","updated":"2020-05-24T10:52:16.387Z","comments":true,"path":"2020/05/24/python-datatype-tuple/","link":"","permalink":"https://o-seok.github.io/2020/05/24/python-datatype-tuple/","excerpt":"","text":"튜플은 immutable 속성을 가진다.순서 O, 중복 O, 수정 X, 삭제 X # 튜플 선언12345678910# 튜플 선언a = ()b = (1,)c = (1, 2, 3, 4)d = (10, 100, ('a', 'b','c'))print(a)print(b)print(c)print(d) 1234()(1,)(1, 2, 3, 4)(10, 100, (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)) # 튜플 연산12print(c + d)print(c * 3) 12(1, 2, 3, 4, 10, 100, (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;))(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4) # 튜플 인덱싱 &amp; 슬라이싱튜플 인덱싱1234# 튜플 인덱싱print(c[2])print(c[3])print(d[2][1]) 12334b 튜플 슬라이싱튜플을 슬라이싱하면 튜플 형태의 결과 값이 나온다. 12print(d[2:])print(d[2][0:2]) 12((&#39;a&#39;, &#39;b&#39;, &#39;c&#39;),)(&#39;a&#39;, &#39;b&#39;) # 튜플 함수 index() : 원하는 값의 인덱스 위치를 알 수 있다.count() : 원하는 값의 갯수를 카운트 할 수 있다. 12345z = (5, 2, 1, 3, 4, 1)print(z)print(3 in z)print(z.index(5))print(z.count(1)) 1234(5, 2, 1, 3, 4, 1)True02","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"datatype","slug":"datatype","permalink":"https://o-seok.github.io/tags/datatype/"},{"name":"tuple","slug":"tuple","permalink":"https://o-seok.github.io/tags/tuple/"}]},{"title":"리스트 (list)","slug":"python-datatype-list","date":"2020-05-24T10:42:11.000Z","updated":"2020-05-24T10:48:02.776Z","comments":true,"path":"2020/05/24/python-datatype-list/","link":"","permalink":"https://o-seok.github.io/2020/05/24/python-datatype-list/","excerpt":"","text":"리스트는 mutable 속성을 가진다.순서 O, 중복 O, 수정 O, 삭제 O # 리스트 선언12345a = []b = list()c = [1, 2, 3, 4]d = [10, 100, 'Pen', 'Bana', 'Orange']e = [10, 100, ['Pen', 'Bana', 'Orange']] 12345[][][1, 2, 3, 4][10, 100, &#39;Pen&#39;, &#39;Bana&#39;, &#39;Orange&#39;][10, 100, [&#39;Pen&#39;, &#39;Bana&#39;, &#39;Orange&#39;]] # 리스트 연산리스트로 간단한 연산 1234# 연산print(c + d)print(c * 3, len(c * 3))print(str(c[0]) + 'hi') 123[1, 2, 3, 4, 10, 100, &#39;Pen&#39;, &#39;Bana&#39;, &#39;Orange&#39;][1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] 121hi # 리스트 인덱싱 &amp; 슬라이싱리스트에 인덱싱과 슬라이싱을 통해 원하는 값을 가져올 수 있다. 인덱싱 : 값이 출력슬라이싱 : list 형태로 출력 리스트 인덱싱12345# 인덱싱print(d[3], d[-2])print(d[0] + d[1])print(e[2][1])print(e[-1][-2]) 1234Bana Bana110BanaBana 리스트 슬라이싱12345# 슬라이싱print(d[0:3])print(d[0:1])print(d[0:2])print(e[2][1:3]) 1234[10, 100, &#39;Pen&#39;][10][10, 100][&#39;Bana&#39;, &#39;Orange&#39;] # 리스트 수정리스트는 mutable 속성이므로 수정 가능하다. 12345a = []b = list()c = [1, 2, 3, 4]d = [10, 100, 'Pen', 'Bana', 'Orange']e = [10, 100, ['Pen', 'Bana', 'Orange']] 인덱스 지정 수정123# list 수정c[0] = 77print(c) 1[77, 2, 3, 4] 슬라이싱 처리 된 위치에 리스트 값으로 선언 해주면, 값으로 수정된다.123# 슬라이싱 처리하여 값을 할당하면, list 안에 값으로 할당이 된다.c[1:2] = [100, 1000, 10000]print(c) 1[1, 100, 1000, 10000, 3, 4] 인덱스를 지정해준 위치에 리스트 값으로 선언 해주면, 리스트 형태로 수정된다.123# 슬라이싱 처리하여 값을 할당하는 것과 다르게, 인덱스를 지정하여 값을 할당해주면 list 형태로 중첩, 할당된다.c[1] = ['a', 'b', 'c']print(c) 1[1, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 1000, 10000, 3, 4] # 리스트 삭제del 을 이용하여 해당 인덱스 값을 삭제한다. 1c = [1, 2, 3, 4] 12del c[1]print(c) 1[1, 3, 4] 12del c[-1]print(c) 1[1, 2, 3] # 리스트 함수리스트 함수가 사용 가능한 함수를 이용하여 원하는 값을 가져올 수 있다. 1y = [5, 2, 3, 1, 4] append() : 리스트 끝에 값을 덧붙인다. 데이터 타입 그대로를 붙인다.12345ex = [88, 77]# 데이터 타입 그대로로 리스트 끝에 덧붙인다.y.attend(ex)print(y) 1[5, 2, 3, 1, 4, [88, 77]] extend() : 리스트 끝에 값을 추가한다.12345ex = [88, 77]# 값 그대로를 리스트 끝에 추가한다.y.extend(ex)print(y) 1[5, 2, 3, 1, 4, 88, 77] sort() : 리스트 내의 값들을 오름차순으로 정렬시킨다.123# 오름차순으로 리스트를 재정렬y.sort()print(y) 1[1, 2, 3, 4, 5] reverse() : 리스트 내의 값들을 역순으로 정렬시킨다.123# reverse = 역순으로 줄세우기y.reverse()print(y) 1[5, 4, 3, 2, 1] insert() : 원하는 인덱스 위치에 값을 수정한다.123# insert = 원하는 인덱스에 값을 수정y.insert(2, 7)print(y) 1[1, 2, 7, 4, 5] remove() : 원하는 값을 찾아 삭제한다.123# remove = 인덱스를 지우는게 아니라, 원하는 데이터 값을 지정하여 삭제할 수 있다.y.remove(2)print(y) 1[1, 3, 4, 5] pop() : 리스트의 맨 마지막 값을 없애고, 출력해준다.123# pop = 맨 마지막 값을 꺼내고, 나머지를 출력한다.y.pop()print(y) 1[1, 2, 3, 4] # 리스트 comprehention리스트를 간결하고 간편하게 선언하는 방법이다. 먼저 일반적인 리스트 선언은 해보면, range(1, 100) : 1 부터 99까지 생성해주는 함수 123456# 일반적인 list 만들기numbers = []for n in range(1, 100): numbers.append(n)print(numbers) 1[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99] comprehention 으로 간단하게 똑같은 리스트를 선언할 수 있다. 12numbers2 = [x for x in range(1, 100)]print(numbers2) 1[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99] 리스트 comprehention에서 if 문도 가능하다.1234# list 컴프리헨션 안에 if 문도 가능하다.p5 = ['갑', '을', '병', '정']rep5 = [v for v in p5 if v != '정']print(rep5) 1[&#39;갑&#39;, &#39;을&#39;, &#39;병&#39;]","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"datatype","slug":"datatype","permalink":"https://o-seok.github.io/tags/datatype/"},{"name":"list","slug":"list","permalink":"https://o-seok.github.io/tags/list/"}]},{"title":"문자열 (string)","slug":"python-datatype-string","date":"2020-05-24T10:34:11.000Z","updated":"2020-05-24T10:38:03.779Z","comments":true,"path":"2020/05/24/python-datatype-string/","link":"","permalink":"https://o-seok.github.io/2020/05/24/python-datatype-string/","excerpt":"","text":"파이썬 데이터 타입 중 문자열에 대해서 정리해보자. 문자열은 수정이 불가능한 immutable 속성을 가지고 있다.참고: mutable &amp; immutable # 문자열 생성다음과 같이 문자열을 생성 할 수 있다.str() 함수를 이용하여 문자열로 형변환 가능하다. len() 함수를 사용하여 문자열의 길이를 알 수 있다. 12345str1 = \"I am boy.\"str2 = 'NiceMan'str3 = ' 'str4 = str('')print(len(str1), len(str2), len(str3), len(str4)) 19 7 1 0 Escape 문자1234escape_str1 = \"Do you have a \\\"big collection\\\"\"print(escape_str1)escape_str2 = \"Tab\\tTab\\tTab\"print(escape_str2) 12Do you have a &quot;big collection&quot;Tab Tab Tab 멀티라인줄이동 하게 되는 경우, 문자열 선언 앞에 \\ 를 붙여서 멀티라인 문자열을 생성할 수 있다. 123456789multi2 = \\\"\"\"문자열멀티라인테스트\"\"\"print(multi2) 12345문자열멀티라인테스트 Raw String주로 경로같은 경우에 사용한다.문자열 앞에 r 을 붙여준다. 1234raw_s1 = r'C:\\Programs\\Test\\Bin'print(raw_s1)raw_s2 = r\"\\\\a\\\\a\"print(raw_s2) 12C:\\Programs\\Test\\Bin\\\\a\\\\a # 문자열 연산파이썬 특징 중 문자열을 연산 할 수 있다. 12345678str_o1 = '*'str_o2 = 'abc 'str_o3 = \"def \"str_o4 = \"Niecman\"print(str_o1 * 100)print(str_o2 + str_o3)print(str_o1 * 3) 123****************************************************************************************************abc def *** 문자열 형 변환 연산 type() : 타입을 확인 할 수 있는 함수 12print(type(str(77)))print(str(19.4) + 's') 12&lt;class &#39;str&#39;&gt;19.4s # 문자열 함수문자열을 다양하게 처리할 수 있는 함수들이 많다.&lt; 참고 : w3school &gt; 123456789a = 'niceman'b = 'orange'print(a.islower())print(a.isupper())print(b.endswith('e'))print(a.capitalize())print(a.replace('nice', 'Good'))print(list(reversed(b))) 123456TrueFalseTrueNicemanGoodman[&#39;e&#39;, &#39;g&#39;, &#39;n&#39;, &#39;a&#39;, &#39;r&#39;, &#39;o&#39;] # 슬라이싱문자열은 immutable 특성을 가지고 있기 때문에슬라이싱을 통해 원하는 값을 처리한다. 123456789101112131415161718# 슬라이싱 처리a = 'niceman'b = 'orange'print(a[0:3])print(a[0:4])print(a[0:len(a)])print(a[:4])print(a[:])# 인덱스 0부터 4전까지 출력하되, 2개씩 점프!print(b[0:4:2]) # 인덱스 1 부터 끝에서 2번째 인덱스까지print(b[1:-2])# 인덱스 처음부터 다 출력하되, 거꾸로 출력하시오.print(b[::-1]) 12345678nicnicenicemannicenicemanoaranegnaro","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"datatype","slug":"datatype","permalink":"https://o-seok.github.io/tags/datatype/"},{"name":"string","slug":"string","permalink":"https://o-seok.github.io/tags/string/"}]},{"title":"데이터 타입","slug":"python-datatype","date":"2020-05-24T10:26:25.000Z","updated":"2020-05-24T10:30:22.700Z","comments":true,"path":"2020/05/24/python-datatype/","link":"","permalink":"https://o-seok.github.io/2020/05/24/python-datatype/","excerpt":"","text":"파이썬의 데이터는 여러가지의 형태로 존재한다. # 데이터 타입 문자형 : str 숫자형 : int(정수), float(실수), complex(복소수) boolean(참, 거짓) 자료형 list tuple set dict type() : 데이터 타입을 확인 할 수 있는 함수 123456789101112131415161718192021222324# 데이터 타입v_str1 = 'Niceman'v_bool = Truev_str2 = 'Goodboy'v_float = 10.3v_int = 7v_dict = &#123; 'name' : 'Kim', 'age' : 25&#125;v_list = [3, 5, 7]v_tuple = (3, 5, 7)v_set = &#123;7, 8, 9&#125;print(type(v_tuple))print(type(v_set))print(type(v_float))print(type(v_str1))print(type(v_str2))print(type(v_bool))print(type(v_dict))print(type(v_int))print(type(v_list)) 123456789&lt;class &#39;tuple&#39;&gt;&lt;class &#39;set&#39;&gt;&lt;class &#39;float&#39;&gt;&lt;class &#39;str&#39;&gt;&lt;class &#39;str&#39;&gt;&lt;class &#39;bool&#39;&gt;&lt;class &#39;dict&#39;&gt;&lt;class &#39;int&#39;&gt;&lt;class &#39;list&#39;&gt; # 데이터 형변환파이썬은 데이터 타입을 바꾸는 형변환이 가능하다. 1234567891011result2 = 9.0c = 10print(int(result2))print(float(c))print(complex(3))print(int(True))print(int(False))print(int('3'))print(complex(False)) 1234567910.0(3+0j)1030j","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"datatype","slug":"datatype","permalink":"https://o-seok.github.io/tags/datatype/"}]},{"title":"람다식 (lambda)","slug":"function-lambda","date":"2020-05-24T10:11:41.000Z","updated":"2020-05-24T10:14:31.909Z","comments":true,"path":"2020/05/24/function-lambda/","link":"","permalink":"https://o-seok.github.io/2020/05/24/function-lambda/","excerpt":"","text":"한마디로 간결! 간단! 깔끔!메모리 절약, 가독성 향상, 코드 간결함수: 객체 생성 -&gt; 리소스(메모리) 할당람다: 즉시 실행(heap 초기화) -&gt; 메모리 초기화 일반적 함수12345678def mul_10(num: int) -&gt; int: return num * 10var_func = mul_10print(var_func)print(type(var_func))print(var_func(10)) 12&lt;class &#39;function&#39;&gt;100 # 람다식1234# x는 인자를 의미 한다.lamda_mul_10 = lambda x: x * 10print('&gt;&gt;&gt;', lamda_mul_10(10)) 1&gt;&gt;&gt; 100 람다식을 인자로 받을 수도, 리턴 값으로 줄 수도 있다.1234def func_final(x, y, func): print( x * y * func(10))func_final(10, 10, lamda_mul_10) 110000 즉석에서 만들어서 줄 수도 있다.1print(func_final(10, 10, lambda x : x * 1000)) 11000000","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"function","slug":"function","permalink":"https://o-seok.github.io/tags/function/"},{"name":"lambda","slug":"lambda","permalink":"https://o-seok.github.io/tags/lambda/"}]},{"title":"hexo hueman 테마에서 반응형으로 header 레이아웃 변경하기","slug":"change-layout-in-hueman-theme-of-hexo","date":"2020-05-22T13:46:16.000Z","updated":"2020-05-24T10:18:53.217Z","comments":true,"path":"2020/05/22/change-layout-in-hueman-theme-of-hexo/","link":"","permalink":"https://o-seok.github.io/2020/05/22/change-layout-in-hueman-theme-of-hexo/","excerpt":"","text":"블로그 헤더부분에 로고 이미지와 간단한 제목을 작성하였다. # 불편함 발생웹페이지가 넓을 때는 현재 레이아웃이 마음에 들었지만 반응형으로 크기를 조절 하니 어디 한군데가 너무나 불편해 졌다. 심지어 모바일에서 블로그를 접속 해보면 확연하게 불편하다. 디자인 1도 모르지만 어느시점에서 로고이미지와 소개글이 가운데로 왔으면 좋겠다. # 반응형으로 header 레이아웃 변경이제 불편함을 지워보자. 💪🏼 theme/hueman/_partial/header.styl 로 들어가 css를 수정한다. header.styl : 123456789.logo-wrap width: 100%.header-title-name width: 100% margin-bottom: 15px padding-left: 50px font-style: italic font-size: 20px logo-wrap: logo를 감싸고 있는 클래스header-title-name: 간단한 소개글 클래스 @media@media 를 사용해서 웹페이지 폭에 따라 속성값들을 각각 변경해준다.width &lt; 960px : 로고이미지, 소개글 가운데 정렬width &gt;= 960px : 원래의 레이아웃 유지 header.styl : 12345678910111213141516171819202122232425262728@media screen and (max-width: 959px) #header-title padding: 0 0 .logo-wrap width: 100% text-align: center .logo display: inline-block .header-title-name width: 100% margin-bottom: 15px text-align: center font-style: italic font-size: 20px@media screen and (min-width: 960px) .logo-wrap width: 100% .header-title-name width: 100% margin-bottom: 15px padding-left: 50px font-style: italic font-size: 20px 위와 같이 max-width: 959px, min-width: 960px 속성값을 주고 각각에 맞는 속성값들을 넣어 주었다. # 불편함 해결 👏🏼불편함 삭제 !! 확인 ✔️ 모바일도 확인 ✔️","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"blog","slug":"01-studying-TIL-👨🏻‍💻/blog","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://o-seok.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://o-seok.github.io/tags/blog/"},{"name":"hueman","slug":"hueman","permalink":"https://o-seok.github.io/tags/hueman/"},{"name":"theme","slug":"theme","permalink":"https://o-seok.github.io/tags/theme/"},{"name":"layout","slug":"layout","permalink":"https://o-seok.github.io/tags/layout/"},{"name":"css","slug":"css","permalink":"https://o-seok.github.io/tags/css/"}]},{"title":"Hexo로 관리하는 github 블로그 👨🏻‍💻","slug":"github-blog-with-hexo","date":"2020-05-22T13:41:29.000Z","updated":"2020-05-24T10:19:31.392Z","comments":true,"path":"2020/05/22/github-blog-with-hexo/","link":"","permalink":"https://o-seok.github.io/2020/05/22/github-blog-with-hexo/","excerpt":"","text":"Hexo로 블로그를 관리해보자.Hexo Document를 참고하여 정리 했고, 자세한 사항은 사이트에서 확인 할 수 있다. # 준비단계github repository 만들기github에서 (user name).github.io repository를 만든다. ( 나의 경우는 O-Seok.github.io )clone하여 내 로컬에도 환경을 만들어 놓는다. node 설치하기Hexo는 node.js 기반의 정적 사이트 생성기의 일종이므로 node를 설치해준다. 1$ brew install node # hexo 설치hexo를 설치 해준다. npm install -g hexo-cli 해도 되지만권한이 필요한 경우 sudo를 붙여서 설치해준다. 1$ sudo npm install -g hexo-cli hexo 블로그로 이용할 폴더의 hexo를 초기화 시켜준다.내 폴더 이름은 YSblog라 했다. 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 로컬영역에서 hexo server를 구동시킨다.http://localhost:4000 로 접속해서 확인한다. 1$ hexo server 123claudjung@jeong-yeongseog-ui-MacBookPro YSblog % hexo serverINFO Start processingINFO Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop. # 첫 포스트 작성hexo 설치가 잘 되었다면 포스팅을 해본다.포스트 생성 1$ hexo new post &quot;title&quot; 123claudjung@jeong-yeongseog-ui-MacBookPro YSblog % hexo new post first-postingINFO Created: ~&#x2F;Documents&#x2F;dev&#x2F;YSblog&#x2F;source&#x2F;_posts&#x2F;first-posting.mdclaudjung@jeong-yeongseog-ui-MacBookPro YSblog % 해당 위치에서 vscode를 열어 포스트를 편집한다. hexo clean : 정리를 한번 해준다.hexo generate : git의 commit 느낌hexo deploy : git의 push의 느낌이랄까.. 순서대로(hexo clean -&gt; hexo generate -&gt; hexo deploy) 명령을 해주고 hexo server를 구동로컬에서 포스팅이 되었는지 확인해준다. # (User name).github.io 와 연동시키기이제 나의 github에 있는 O-Seok.github.io를 hexo로 관리하기 위해서 연동시켜보자. 설정hexo-deployer-git 을 설치한다. 1$ npm install hexo-deployer-git --save _config.yml 을 편집한다. 1234567891011121314151617claudjung@jeong-yeongseog-ui-MacBookPro YSblog % ls -altotal 232drwxr-xr-x 14 claudjung staff 448 5 6 02:18 .drwxr-xr-x 8 claudjung staff 256 5 4 15:20 ..drwxr-xr-x 9 claudjung staff 288 5 6 02:18 .deploy_git-rw-r--r-- 1 claudjung staff 65 5 4 15:20 .gitignore-rw-r--r-- 1 claudjung staff 2423 5 6 02:06 _config.yml-rw-r--r-- 1 claudjung staff 26113 5 6 02:34 db.jsondrwxr-xr-x 3 claudjung staff 96 5 4 15:33 imgdrwxr-xr-x 202 claudjung staff 6464 5 4 15:46 node_modules-rw-r--r-- 1 claudjung staff 74015 5 4 15:46 package-lock.json-rw-r--r-- 1 claudjung staff 617 5 4 15:46 package.jsondrwxr-xr-x 8 claudjung staff 256 5 6 02:18 publicdrwxr-xr-x 5 claudjung staff 160 5 4 15:20 scaffoldsdrwxr-xr-x 3 claudjung staff 96 5 4 15:20 sourcedrwxr-xr-x 4 claudjung staff 128 5 4 16:58 themesclaudjung@jeong-yeongseog-ui-MacBookPro YSblog % vim _config.yml 먼저 URL의 url: 부분을 나의 github.io repository 이름으로 수정해준다. 123456789# URL## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;url: https:&#x2F;&#x2F;O-Seok.github.ioroot: &#x2F;permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks vim의 insert 모드로 변환 후, #Deployment 의type: : gitrepo: : https://github.com/(User name)/(User name).github.io.git수정해준다. ⚠️ 주의type, repo 는 앞에서 2칸을 띄우고 작성한다.이후엔 한칸을 띄우고 작성한다.(이것은 약속! 이렇게 해야 적용이 된다.) 12345# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;O-Seok&#x2F;O-Seok.github.io.git 다음으로 hexo clean , hexo generate, hexo deploy 를 순서대로 명령해준다.hexo로 관리하던 블로그용 폴더 안의 파일들이 github의 github.io repository에 덮어 씌여진다. 브라우저 url에 블로그 주소를 입력하면 hexo가 된 것을 확인 할 수 있다.BRAVO ~~ !!! 👏🏼 # 키워드 sudo npm install -g hexo-cli hexo init hexo new post serer, clean, generate, deploy .config_yml url: deploy: type: , repo: 설정 법칙","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"blog","slug":"01-studying-TIL-👨🏻‍💻/blog","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://o-seok.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://o-seok.github.io/tags/blog/"},{"name":"github","slug":"github","permalink":"https://o-seok.github.io/tags/github/"}]},{"title":"함수 (function)","slug":"python-function","date":"2020-05-19T13:41:44.000Z","updated":"2020-05-24T10:22:46.035Z","comments":true,"path":"2020/05/19/python-function/","link":"","permalink":"https://o-seok.github.io/2020/05/19/python-function/","excerpt":"","text":"어떠한 반복적이고 중복되는 프로그래밍을 피할 수 있다.하나의 기능을 하는 함수를 만들어야 좋다.함수로 전달한 값을 인자(argument)라고 부르며 이는 함수 내에 매개변수(parameter)에 복사한다. ⚠️ 함수 선언 위치함수를 사용할 위치보다 위에서 선언을 해주고, 선언한 위치보다 아래에서 사용한다. # 정의(def)함수는 입력 매개변수(parameter)로 모든 타입을 여러 개 취할 수 있다.함수 이름은 변수 이름과 동일한 정책함수 이름은 동사로 시작 추천매개변수 이름 의미있게 선택 12def 함수명(parameter): (실행할 코드) # 함수 호출 (call)함수명()함수(parameter) 간단한 호출12345def hello(word): print('Hello ', word)hello('Python!')hello(7777) 12Hello Python!Hello 7777 # return함수는 return 값을 가질 수 있다.함수가 명시적으로 return을 호출 하지 않으면 None을 호출 123456def hello_return(word): val = \"Hello \" + str(word) return valstr = hello_return(\"python!!!!!!!\")print(str) 1Hello python!!!!!!! 다중리턴12345678def func_mul(x): y1 = x * 100 y2 = x * 200 y3 = x * 300 return y1, y2, y3val1, val2, val3 = func_mul(100)print(type(val1), val2, val3) 1&lt;class &#39;int&#39;&gt; 20000 30000 다중리턴 (데이터타입 변환)12345678def func_mul2(x): y1 = x * 100 y2 = x * 200 y3 = x * 300 return [y1, y2, y3]lt = func_mul2(100)print(lt, type(lt)) 1[10000, 20000, 30000] &lt;class &#39;list&#39;&gt; # 힌트 함수인자를 어떤 타입을 받는지, 출력 값은 어떠한 데이터 타입인지 설명해주는 함수 1234567def func_mul3(x : int) -&gt; list: y1 = x * 100 y2 = x * 200 y3 = x * 300 return [y1, y2, y3]print(func_mul3(5)) 1[500, 1000, 1500] # *args매개변수가 몇개가 넘어올지 모를 때다양한 매개변수 형태를 받아서 함수의 흐름이 바뀌는 기능을 원할 때리턴 값은 튜플 형태로 나온다. 12345def args_func(*args): print(args)args_func('kim')args_func('kim','park') 12(&#39;kim&#39;,)(&#39;kim&#39;, &#39;park&#39;) 123456def args_func2(*args): for t in args: print(t)args_func2('kim')args_func2('kim','park') 123kimkimpark ✔️ enumerate()인덱스와 값을 같이 출력 해준다. 1234def args_func3(*args): for i, v in enumerate(*args): print(i, v)&gt;args_func3('kim', 'park') 123# 결과값&gt;0 kim&gt;1 park # **kwargs매개변수가 몇개가 넘어올지 모를 때다양한 매개변수 형태를 받아서 함수의 흐름이 바뀌는 기능을 원할 때딕셔너리형태의 인자를 받고, 딕셔너리형태로 리턴한다. 1234def kwargs_func(**kwargs): print(kwargs)kwargs_func(name1='kim', name2='Park', name3='Lee') 1&#123;&#39;name1&#39;: &#39;kim&#39;, &#39;name2&#39;: &#39;Park&#39;, &#39;name3&#39;: &#39;Lee&#39;&#125; dic에서 items()로 반복문을 사용하여 key와 value를 각각 출력 가능하다. 12345def kwargs_func2(**kwargs): for k, v in kwargs.items(): print(k, v)kwargs_func2(name1='kim', name2='Park', name3='Lee') 123name1 kimname2 Parkname3 Lee # (인자, args, *kwargs)혼합해서 사용 할 때arg1, arg2 : 필수인자args, *kwargs : 가상인자 12345def example_mul(arg1, arg2, *args, **kwargs): print(arg1, arg2, args, kwargs)example_mul(10, 20)example_mul(10, 20, 'park', 'kim', age1=24, age2=34) 1210 20 () &#123;&#125;10 20 (&#39;park&#39;, &#39;kim&#39;) &#123;&#39;age1&#39;: 24, &#39;age2&#39;: 34&#125; # 일등 시민: 함수파이썬은 모든 것이 객체(object)숫자, 문자열, tuple, list, dict, 함수 등 모두가 객체일등 시민은 함수를 변수에 할당 가능다른 함수에서 이를 인자로 사용 가능하고 이를 변환 가능 12345678910# *args, **kwargs 사용해서 인자 결합 가능def run(func, *args): print(func, args) # do_sum(1,2,3) return func(*args)def do_sum(*args): return sum(args)run(do_sum, 1, 2, 3) 16 # 내부 함수 (중첩함수/inner function)함수 안에 또 다른 함수 정의 가능가독성/확장성이 줄어들 수 있으므로 지양루프나 코드 중복을 피하기 위해 함수 내 복잡한 작업을 한번 이상 수행할 때 유용 1234567def do_sum(*args): def print_pretty(*args): return f'Result: &#123;sum(args)&#125;' return print_pretty(*args)do_sum(1, 2, 3) 1&#39;Result: 6&#39; # 클로져바깥 함수로부터 생성된 변수값을 변경하고 저장 할 수 있는 함수내부 함수는 클로져 처럼 행동 가능클로져는 다른 함수에 의해 동적으로 생성 123456789101112def do_sum(*args): def print_pretty(): return f'Result: &#123;sum(args)&#125;' return print_prettya = do_sum(1, 2, 3)print(a)b = do_sum(4, 5, 6)print(b)# a, b 모두 각각 사용된 인자값을 복사해서 저장중 12&lt;function do_sum.&lt;locals&gt;.print_pretty at 0x7efc56c59d90&gt;&lt;function do_sum.&lt;locals&gt;.print_pretty at 0x7efc56be52f0&gt; # 키워드 def / call type hinting parameter / argument args / *kwargs 내부함수 일등 시민: 함수 클로져","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"function","slug":"function","permalink":"https://o-seok.github.io/tags/function/"}]},{"title":"나도 'Hello World!'","slug":"printed-hello-world","date":"2020-05-18T14:57:40.000Z","updated":"2020-05-24T10:31:23.030Z","comments":true,"path":"2020/05/18/printed-hello-world/","link":"","permalink":"https://o-seok.github.io/2020/05/18/printed-hello-world/","excerpt":"","text":"# print()파이썬의 print() 함수는 출력 함수이다.간단히 문자열을 출력해본다.그 유명한 Hello World 를… 😁 기본출력1print('Hello World!') 1Hello World! 문자열은 다음과 같이도 출력 가능하다. 1234print('Hello World!')print(\"Hello World!\")print(\"\"\"Hello World!\"\"\")print('''Hello World!''') 1234Hello World!Hello World!Hello World!Hello World! Escape 코드|코드|특징||–|–||\\n| 개행||\\t| 탭||\\\\ |문자||\\‘ |문자||\\“ |문자||\\r |캐리지 리턴||\\f |폼 피드||\\a | 벨 소리||\\b |백 스페이스||\\000 |널 문자| 12345678print(\"'you'\")print('\\'you\\'')print('\"you\"')print(\"\"\"'you'\"\"\")print('\\\\you\\\\')print('\\\\you\\\\\\n\\n\\n')print('test')print('\\t\\t\\ttest') 1234567891011&#39;you&#39;&#39;you&#39;&quot;you&quot;&#39;you&#39;\\you\\\\you\\test test # 옵션print()함수는 출력 값에 다양한 옵션을 줄 수 있다. separator값들 사이에 옵션을 넣어줄 수 있다. 1234# Separator 옵션 사용print('T', 'E', 'S', 'T', sep='')print('2019', '02', '19', sep='-')print('niceman', 'google.com', sep='@') 123TEST2019-02-19niceman@google.com end값 끝에 옵션을 줄 수 있다. 12345# End 옵션 사용print('welcome to', end=' ')print('the black parade', end=' ')print('piano notes')print('testtest') 12welcome to the black parade piano notestesttest formatformat 옵션을 이용하여 다양하게 특정한 출력 값들을 매칭 시켜줄 수 있다. 1234# format 사용 [] , &#123;&#125;, ()print('&#123;&#125; and &#123;&#125;'.format('You', 'me'))print('&#123;0&#125; and &#123;1&#125;, and &#123;0&#125;'.format('You', 'me'))print('&#123;a&#125; are &#123;b&#125;'.format(a='you', b='me')) 123You and meYou and me, and Youyou are me %s : 문자, %d = 정수, %f = 실수 123456# %s : 문자, %d = 정수, %f = 실수print(\"%s's favorite number is %d\" %('Cluad', 3))print(\"Test1: %5d, price: %4.2f\" %(776, 6534.123))print(\"Test1: &#123;0: 5d&#125;, pricce: &#123;1: 4.2f&#125;\".format(776, 6534.123))print(\"Test1: &#123;a: 5d&#125;, pricce: &#123;b: 4.2f&#125;\".format(a=776, b=6534.123)) 1234Cluad&#39;s favorite number is 3Test1: 776, price: 6534.12Test1: 776, pricce: 6534.12Test1: 776, pricce: 6534.12 # 키워드 print() Escape 코드 sep=’’ end=’’ format()","categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"print","slug":"print","permalink":"https://o-seok.github.io/tags/print/"}]},{"title":"CSV 파일 read시 UnicodeDecodeError 인코딩 오류 대처하기","slug":"CSV-파일-read시-UnicodeDecodeError-인코딩-오류-대처하기","date":"2020-05-09T07:02:10.000Z","updated":"2020-05-24T10:16:06.390Z","comments":true,"path":"2020/05/09/CSV-파일-read시-UnicodeDecodeError-인코딩-오류-대처하기/","link":"","permalink":"https://o-seok.github.io/2020/05/09/CSV-%ED%8C%8C%EC%9D%BC-read%EC%8B%9C-UnicodeDecodeError-%EC%9D%B8%EC%BD%94%EB%94%A9-%EC%98%A4%EB%A5%98-%EB%8C%80%EC%B2%98%ED%95%98%EA%B8%B0/","excerpt":"","text":"파이썬으로 csv 파일을 읽어오는데 인코딩 오류 발생했다. 1234567import csvwith open('./resource/sample1.csv', 'r') as f: reader = csv.reader(f) for c in reader: print(c) 유니코드 에러 내용: 1UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xb9 in position 0: invalid start byte 다음과 같은 경우 드물게 발생한다고 한다 EUC-KR과 CP949를 구분하는 경우 EUC-KR만을 지원하는 프로그램에서 CP949로 작성된 텍스트 파일을 여는 경우 쉽게 말해 지금 나의 파이썬 인코딩 설정 환경과 데이터 파일을 인코딩하는 설정 환경이 잘 안맞아서 그렇다는 것! # 해결방법오류 관련 서치 중 encoding=&#39;CP949&#39; 옵션을 넣어주면 깔끔하게 해결이 된 다는 것을 알게 되었다. 내 코드에 바로 적용해 보면 1234567import csvwith open('./resource/sample1.csv', 'r', encoding='CP949') as f: reader = csv.reader(f) for c in reader: print(c) 지정한 csv 파일을 잘 읽어온다!!! 😎🤟🏼 1234567891011[&#39;번호&#39;, &#39;이름&#39;, &#39;가입일시&#39;, &#39;나이&#39;][&#39;1&#39;, &#39;김정수&#39;, &#39;2017-01-19 11:30:00&#39;, &#39;25&#39;][&#39;2&#39;, &#39;박민구&#39;, &#39;2017-02-07 10:22:00&#39;, &#39;35&#39;][&#39;3&#39;, &#39;정순미&#39;, &#39;2017-01-22 09:10:00&#39;, &#39;33&#39;][&#39;4&#39;, &#39;김정현&#39;, &#39;2017-02-22 14:09:00&#39;, &#39;45&#39;][&#39;5&#39;, &#39;홍미진&#39;, &#39;2017-04-01 18:00:00&#39;, &#39;17&#39;][&#39;6&#39;, &#39;김순철&#39;, &#39;2017-05-14 22:33:07&#39;, &#39;22&#39;][&#39;7&#39;, &#39;이동철&#39;, &#39;2017-03-01 23:44:45&#39;, &#39;27&#39;][&#39;8&#39;, &#39;박지숙&#39;, &#39;2017-01-11 06:04:18&#39;, &#39;30&#39;][&#39;9&#39;, &#39;김은미&#39;, &#39;2017-02-08 07:44:33&#39;, &#39;51&#39;][&#39;10&#39;, &#39;장혁철&#39;, &#39;2017-12-01 13:01:11&#39;, &#39;16&#39;] # 키워드 UnicodeDecodeError encoding=’CP949’","categories":[{"name":"02_issue. TIL 💥","slug":"02-issue-TIL-💥","permalink":"https://o-seok.github.io/categories/02-issue-TIL-%F0%9F%92%A5/"},{"name":"python","slug":"02-issue-TIL-💥/python","permalink":"https://o-seok.github.io/categories/02-issue-TIL-%F0%9F%92%A5/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"csv","slug":"csv","permalink":"https://o-seok.github.io/tags/csv/"},{"name":"UnicodeDecodeError","slug":"UnicodeDecodeError","permalink":"https://o-seok.github.io/tags/UnicodeDecodeError/"}]}],"categories":[{"name":"01_studying. TIL 👨🏻‍💻","slug":"01-studying-TIL-👨🏻‍💻","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/"},{"name":"python","slug":"01-studying-TIL-👨🏻‍💻/python","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/python/"},{"name":"blog","slug":"01-studying-TIL-👨🏻‍💻/blog","permalink":"https://o-seok.github.io/categories/01-studying-TIL-%F0%9F%91%A8%F0%9F%8F%BB%E2%80%8D%F0%9F%92%BB/blog/"},{"name":"02_issue. TIL 💥","slug":"02-issue-TIL-💥","permalink":"https://o-seok.github.io/categories/02-issue-TIL-%F0%9F%92%A5/"},{"name":"python","slug":"02-issue-TIL-💥/python","permalink":"https://o-seok.github.io/categories/02-issue-TIL-%F0%9F%92%A5/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://o-seok.github.io/tags/python/"},{"name":"package","slug":"package","permalink":"https://o-seok.github.io/tags/package/"},{"name":"module","slug":"module","permalink":"https://o-seok.github.io/tags/module/"},{"name":"class","slug":"class","permalink":"https://o-seok.github.io/tags/class/"},{"name":"while","slug":"while","permalink":"https://o-seok.github.io/tags/while/"},{"name":"for","slug":"for","permalink":"https://o-seok.github.io/tags/for/"},{"name":"if","slug":"if","permalink":"https://o-seok.github.io/tags/if/"},{"name":"datatype","slug":"datatype","permalink":"https://o-seok.github.io/tags/datatype/"},{"name":"set","slug":"set","permalink":"https://o-seok.github.io/tags/set/"},{"name":"dict","slug":"dict","permalink":"https://o-seok.github.io/tags/dict/"},{"name":"tuple","slug":"tuple","permalink":"https://o-seok.github.io/tags/tuple/"},{"name":"list","slug":"list","permalink":"https://o-seok.github.io/tags/list/"},{"name":"string","slug":"string","permalink":"https://o-seok.github.io/tags/string/"},{"name":"function","slug":"function","permalink":"https://o-seok.github.io/tags/function/"},{"name":"lambda","slug":"lambda","permalink":"https://o-seok.github.io/tags/lambda/"},{"name":"hexo","slug":"hexo","permalink":"https://o-seok.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://o-seok.github.io/tags/blog/"},{"name":"hueman","slug":"hueman","permalink":"https://o-seok.github.io/tags/hueman/"},{"name":"theme","slug":"theme","permalink":"https://o-seok.github.io/tags/theme/"},{"name":"layout","slug":"layout","permalink":"https://o-seok.github.io/tags/layout/"},{"name":"css","slug":"css","permalink":"https://o-seok.github.io/tags/css/"},{"name":"github","slug":"github","permalink":"https://o-seok.github.io/tags/github/"},{"name":"print","slug":"print","permalink":"https://o-seok.github.io/tags/print/"},{"name":"csv","slug":"csv","permalink":"https://o-seok.github.io/tags/csv/"},{"name":"UnicodeDecodeError","slug":"UnicodeDecodeError","permalink":"https://o-seok.github.io/tags/UnicodeDecodeError/"}]}